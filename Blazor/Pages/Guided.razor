@using Microsoft.CST.AttackSurfaceAnalyzer.Cli.Components
@using Microsoft.CST.AttackSurfaceAnalyzer.Types 
@inject Microsoft.CST.AttackSurfaceAnalyzer.Cli.AppData appData

@page "/"

@switch (pageState)
{
    case PageState.Options:
        <button @onclick="BeginGuided">Go</button>
        <CollectorOptionsRazor />
        <MonitorOptionsRazor />
        <AnalyzeOptionsRazor />
        break;
    case PageState.Scanning:
        <p>Running Scan.</p>
        break;
    case PageState.Monitoring:
        <p>Running Monitoring.</p>
        break;
    case PageState.Analyzing:
        <p>Running Analysis.</p>
        break;
    case PageState.Results:
        <p>Showing Results.</p>
        break;
}


@code{
    enum PageState
    {
        Options,
        Scanning,
        Monitoring,
        Analyzing,
        Results
    }

    PageState pageState = PageState.Options;

    async void BeginGuided()
    {
        await BeginScan();
        await BeginMonitor();
    }

    async void ContinueGuided()
    {
        await BeginAnalyze();

        pageState = PageState.Results;
    }

    async Task<ASA_ERROR> BeginScan()
    {
        pageState = PageState.Scanning;
        return await Task.Factory.StartNew(() => AttackSurfaceAnalyzerClient.RunCollectCommand(appData.CollectOptions));
    }

    async Task<ASA_ERROR> BeginMonitor()
    {
        pageState = PageState.Monitoring;
        return await Task.Factory.StartNew(() => AttackSurfaceAnalyzerClient.RunGuiMonitorCommand(appData.MonitorOptions));
    }

    async Task<ASA_ERROR> BeginAnalyze()
    {
        pageState = PageState.Analyzing;
        Task.Factory.StartNew(() =>
        {
            var results = AttackSurfaceAnalyzerClient.CompareRuns(appData.CompareOptions);
            AttackSurfaceAnalyzerClient.InsertCompareResults(results, opts.FirstRunId, opts.SecondRunId);
        });
    }
}